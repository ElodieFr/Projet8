import mlflow
import mlflow.pyfunc
import pandas as pd
import streamlit as st
import os
import plotly.graph_objects as go

# D√©finition des chemins locaux
DATA_PATH = "data/"
MODEL_PATH = "models/model"
OPTIMAL_THRESHOLD = 0.636364

# V√©rification de l'existence des fichiers
@st.cache_data()
def check_file_exists(file_path):
    return os.path.exists(file_path)

# Chargement des donn√©es avec gestion d'erreurs
@st.cache_data(ttl=600)
def load_csv_data(filename):
    file_path = os.path.join(DATA_PATH, filename)
    if check_file_exists(file_path):
        try:
            return pd.read_csv(file_path)
        except Exception as e:
            st.error(f"‚ö†Ô∏è Erreur lors du chargement {filename} : {str(e)}")
    return None

@st.cache_data(ttl=600)
def load_feature_names():
    file_path = os.path.join(DATA_PATH, "feature_names.txt")
    if check_file_exists(file_path):
        with open(file_path, "r") as f:
            return f.read().splitlines()
    return []

@st.cache_resource()
def load_model():
    if check_file_exists(MODEL_PATH):
        try:
            return mlflow.sklearn.load_model(MODEL_PATH)
        except Exception as e:
            st.error(f"‚ö†Ô∏è Erreur lors du chargement du mod√®le : {str(e)}")
    return None

# Chargement des ressources
model = load_model()
feature_names = load_feature_names()
customer_data = load_csv_data("application_test.csv")
customer_data_description = load_csv_data("HomeCredit_columns_description.csv")

if customer_data is None or model is None:
    st.error("‚ö†Ô∏è Impossible de charger les donn√©es ou le mod√®le. V√©rifiez que tous les fichiers sont disponibles.")
    st.stop()

# Fonction de pr√©diction s√©curis√©e
def make_prediction(input_data, model, threshold):
    input_df = pd.DataFrame([input_data])
    try:
        if hasattr(model, "predict_proba"):
            prob = model.predict_proba(input_df)[:, 1][0]
            return prob, "Refus√©" if prob >= threshold else "Accept√©"
        else:
            st.error("‚ö†Ô∏è Le mod√®le ne supporte pas `predict_proba`")
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erreur lors de la pr√©diction : {str(e)}")
    return None, None

# Affichage d'une jauge avec Plotly
def gauge_chart(value, threshold):
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        title={'text': "Probabilit√© de d√©faut de paiement"},
        gauge={'axis': {'range': [0, 1]},
               'bar': {'color': "red" if value >= threshold else "green"},
               'steps': [
                   {'range': [0, threshold], 'color': "green"},
                   {'range': [threshold, 1], 'color': "red"}]}
    ))
    st.plotly_chart(fig)

# Interface principale
def main():
    st.title("üìä Credit Scoring Dashboard")
    st.header("üîç S√©lection du client")
    sk_id_curr = st.number_input("Entrez un SK_ID_CURR:",
                                 min_value=int(customer_data['SK_ID_CURR'].min()),
                                 max_value=int(customer_data['SK_ID_CURR'].max()))
    if sk_id_curr in customer_data['SK_ID_CURR'].values:
        client_data = customer_data[customer_data['SK_ID_CURR'] == sk_id_curr].iloc[0].to_dict()
        st.write("üìã **Informations du client :**")
        st.json(client_data)
        
        # Pr√©diction
        prob, label = make_prediction(client_data, model, OPTIMAL_THRESHOLD)
        if prob is not None:
            gauge_chart(prob, OPTIMAL_THRESHOLD)
            st.success(f"**R√©sultat de la pr√©diction : {label}**")
    else:
        st.warning("‚ö†Ô∏è Client non trouv√©. Veuillez entrer un ID valide.")

    # Mode debug pour v√©rifier les fichiers
    if st.checkbox("üîç Mode Debug"):
        st.write("Fichiers disponibles dans 'data/':", os.listdir(DATA_PATH))
        st.write("Fichiers disponibles dans 'models/':", os.listdir("models/"))
        st.write("Feature Names:", feature_names)
        st.write("Aper√ßu des donn√©es clients:", customer_data.head())

if __name__ == "__main__":
    main()